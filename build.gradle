plugins {
    id 'java'
}

group 'com.idev.microservice'
version '0.0.1'

sourceCompatibility = 1.8

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.3.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-server
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-eureka-server', version: '2.1.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies
    compile group: 'org.springframework.cloud', name: 'spring-cloud-dependencies', version: 'Greenwich.RELEASE', ext: 'pom'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

}

// 所有子项目的通用配置
subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    version = '0.0.1'

    // JVM 版本号要求
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

    //定义版本号
    ext {
        springbootVersion = '2.1.3.RELEASE'
        springVersion = '5.1.5.RELEASE'
        junitVersion = '4.12'
        swaggerVersion = '2.9.2'
    }

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }

    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }

    configurations {
        // 所有需要忽略的包定义在此
        all*.exclude group: 'ch.qos.logback'
//        all*.exclude group: 'ch.qos.logback'
//        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    dependencies {

        compileOnly 'org.projectlombok:lombok:1.18.2'

        // 通用依赖
        compile(
                "org.springframework.boot:spring-boot-starter-web:$springbootVersion",
                "org.springframework.boot:spring-boot-starter-test:$springbootVersion",
                "org.springframework.boot:spring-boot-devtools:$springbootVersion",
                "io.springfox:springfox-swagger2:$swaggerVersion",
                "io.springfox:springfox-swagger-ui:$swaggerVersion",

//                "org.springframework:spring-orm:$springVersion",
//                "org.springframework:spring-tx:$springVersion",
//                "org.springframework.data:spring-data-jpa:1.10.3.RELEASE",
//                "org.hibernate:hibernate-entitymanager:$hibernateVersion",
//                "c3p0:c3p0:0.9.1.2",
//                "mysql:mysql-connector-java:6.0.4",
//                "org.slf4j:slf4j-nop:1.7.21",
//                "commons-fileupload:commons-fileupload:1.3.2",
//                "com.fasterxml.jackson.core:jackson-databind:2.8.2"
        )

//        annotationProcessor 'org.projectlombok:lombok:1.18.2'

        // 依赖maven中不存在的jar
//        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
//        ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
//        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')
//
//        compile jarTree

        // 测试依赖
        testCompile(
//                "org.springframework:spring-test:$springVersion",
                "junit:junit:$junitVersion"
        )
    }

    // 显示当前项目下所有用于 compile 的 jar.
//    task listJars(description: 'Display all compile jars.') << {
//        configurations.compile.each { File file -> println file.name }
//    }
}

